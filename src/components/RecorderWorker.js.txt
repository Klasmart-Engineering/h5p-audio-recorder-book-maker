/**
 * This is a web worker responsible for recording/buffering the sound and
 * encoding it as wav.
 */

var recLength = 0;
var recBuffers = [];
var sampleRate;
var numChannels;

// Listen to incoming messages
this.onmessage = function(e) {
  switch(e.data.command){
    case 'init':
      init(e.data.config);
      break;
    case 'record':
      record(e.data.buffer);
      break;
    case 'export-wav':
      exportWAV();
      break;
    case 'clear':
      clear();
      break;
  }
};

/**
 * Initialization
 *
 * @param  {Object} config
 */
function init(config) {
  sampleRate = config.sampleRate;
  numChannels = config.numChannels;
  initBuffers();
}

/**
 * Storing the data buffer
 *
 * @param  {Float32Array} inputBuffer
 */
function record(inputBuffer) {
  for (var channel = 0; channel < numChannels; channel++){
    recBuffers[channel].push(inputBuffer[channel]);
  }
  recLength += inputBuffer[0].length;
}

/**
 * Export buffered data as a wav encoded blob
 */
function exportWAV() {
  var buffers = [];
  for (var channel = 0; channel < numChannels; channel++){
    buffers.push(mergeBuffers(recBuffers[channel], recLength));
  }
  if (numChannels === 2){
      var interleaved = interleave(buffers[0], buffers[1]);
  } else {
      var interleaved = buffers[0];
  }
  var dataview = encodeWAV(interleaved);
  var audioBlob = new Blob([dataview], { type: 'audio/wav' });

  this.postMessage({
    command: 'wav-delivered',
    blob: audioBlob
  });
}

/**
 * Clear the buffers
 */
function clear() {
  recLength = 0;
  recBuffers = [];
  initBuffers();
}

/**
 * Initialize the buffers
 */
function initBuffers() {
  for (var channel = 0; channel < numChannels; channel++){
    recBuffers[channel] = [];
  }
}

/**
 * Merge buffers
 *
 * @param {Array} recBuffers
 * @param {[type]} recLength
 * @return {Float32Array}
 */
function mergeBuffers(recBuffers, recLength){
  var result = new Float32Array(recLength);
  var offset = 0;
  for (var i = 0; i < recBuffers.length; i++){
    result.set(recBuffers[i], offset);
    offset += recBuffers[i].length;
  }
  return result;
}

/**
 * Interleave two channels
 *
 * @param {Array} inputL
 * @param {Array} inputR
 * @return {Float32Array}
 */
function interleave(inputL, inputR){
  var length = inputL.length + inputR.length;
  var result = new Float32Array(length);

  var index = 0,
    inputIndex = 0;

  while (index < length){
    result[index++] = inputL[inputIndex];
    result[index++] = inputR[inputIndex];
    inputIndex++;
  }
  return result;
}

/**
 * Convert floats to 16 bit PCMs
 *
 * @param {DataView} output
 * @param {number} offset
 * @param {Array} input
 */
function floatTo16BitPCM(output, offset, input) {
  for (var i = 0; i < input.length; i++, offset+=2){
    var s = Math.max(-1, Math.min(1, input[i]));
    output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
  }
}

/**
 * Write string to wav header
 *
 * @param {DataView} view
 * @param {number} offset
 * @param {string} string
 */
function writeString(view, offset, string) {
  for (var i = 0; i < string.length; i++){
    view.setUint8(offset + i, string.charCodeAt(i));
  }
}

/**
 * Encode as wav
 *
 * @param {Array} samples
 * @return {DataView}
 */
function encodeWAV(samples) {
  var buffer = new ArrayBuffer(44 + samples.length * 2);
  var view = new DataView(buffer);

  /* RIFF identifier */
  writeString(view, 0, 'RIFF');
  /* RIFF chunk length */
  view.setUint32(4, 36 + samples.length * 2, true);
  /* RIFF type */
  writeString(view, 8, 'WAVE');
  /* format chunk identifier */
  writeString(view, 12, 'fmt ');
  /* format chunk length */
  view.setUint32(16, 16, true);
  /* sample format (raw) */
  view.setUint16(20, 1, true);
  /* channel count */
  view.setUint16(22, numChannels, true);
  /* sample rate */
  view.setUint32(24, sampleRate, true);
  /* byte rate (sample rate * block align) */
  view.setUint32(28, sampleRate * 2 * numChannels, true);
  /* block align (channel count * bytes per sample) */
  view.setUint16(32, numChannels * 2, true);
  /* bits per sample */
  view.setUint16(34, 16, true);
  /* data chunk identifier */
  writeString(view, 36, 'data');
  /* data chunk length */
  view.setUint32(40, samples.length * 2, true);

  floatTo16BitPCM(view, 44, samples);

  return view;
}
